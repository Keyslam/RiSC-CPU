//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from rasm.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class rasmParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KEYWORD=1, SPECIAL_KEYWORD=2, LABEL=3, ARG=4, WORD=5, OCTAL=6, DECIMAL=7, 
		HEXADECIMAL=8, COMMENT=9, NL=10, WS=11;
	public const int
		RULE_file = 0, RULE_statement = 1, RULE_labelDef = 2, RULE_line = 3;
	public static readonly string[] ruleNames = {
		"file", "statement", "labelDef", "line"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "KEYWORD", "SPECIAL_KEYWORD", "LABEL", "ARG", "WORD", "OCTAL", "DECIMAL", 
		"HEXADECIMAL", "COMMENT", "NL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "rasm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static rasmParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public rasmParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public rasmParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(rasmParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(rasmParser.NL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrasmListener typedListener = listener as IrasmListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrasmListener typedListener = listener as IrasmListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD) | (1L << SPECIAL_KEYWORD) | (1L << LABEL) | (1L << NL))) != 0)) {
				{
				State = 10;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KEYWORD:
				case SPECIAL_KEYWORD:
				case LABEL:
					{
					State = 8;
					line();
					}
					break;
				case NL:
					{
					State = 9;
					Match(NL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 14;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD() { return GetToken(rasmParser.KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARG() { return GetTokens(rasmParser.ARG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARG(int i) {
			return GetToken(rasmParser.ARG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIAL_KEYWORD() { return GetToken(rasmParser.SPECIAL_KEYWORD, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrasmListener typedListener = listener as IrasmListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrasmListener typedListener = listener as IrasmListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 27;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 15;
				Match(KEYWORD);
				{
				State = 17;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 16;
					Match(ARG);
					}
					break;
				}
				State = 20;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 19;
					Match(ARG);
					}
					break;
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARG) {
					{
					State = 22;
					Match(ARG);
					}
				}

				}
				}
				break;
			case SPECIAL_KEYWORD:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 25;
				Match(SPECIAL_KEYWORD);
				State = 26;
				Match(ARG);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(rasmParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(rasmParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LabelDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrasmListener typedListener = listener as IrasmListener;
			if (typedListener != null) typedListener.EnterLabelDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrasmListener typedListener = listener as IrasmListener;
			if (typedListener != null) typedListener.ExitLabelDef(this);
		}
	}

	[RuleVersion(0)]
	public LabelDefContext labelDef() {
		LabelDefContext _localctx = new LabelDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_labelDef);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			Match(LABEL);
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 30;
				Match(NL);
				}
			}

			State = 34;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 33;
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 36;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelDefContext labelDef() {
			return GetRuleContext<LabelDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(rasmParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(rasmParser.NL, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrasmListener typedListener = listener as IrasmListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrasmListener typedListener = listener as IrasmListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 6, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD:
			case SPECIAL_KEYWORD:
				{
				State = 38;
				statement();
				}
				break;
			case LABEL:
				{
				State = 39;
				labelDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 42;
				Match(COMMENT);
				}
			}

			State = 46;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 45;
				Match(NL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\r', '\x33', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\r', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x10', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x14', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x17', '\n', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x1A', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x1E', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\"', '\n', '\x4', '\x3', '\x4', '\x6', '\x4', '%', '\n', 
		'\x4', '\r', '\x4', '\xE', '\x4', '&', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '+', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', '.', '\n', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\x31', '\n', '\x5', '\x3', '\x5', '\x2', 
		'\x2', '\x6', '\x2', '\x4', '\x6', '\b', '\x2', '\x2', '\x2', '\x39', 
		'\x2', '\xE', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x1F', '\x3', '\x2', '\x2', '\x2', '\b', '*', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\r', '\x5', '\b', '\x5', '\x2', '\v', '\r', 
		'\a', '\f', '\x2', '\x2', '\f', '\n', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\r', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\f', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\x3', '\x3', '\x2', '\x2', '\x2', '\x10', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x13', '\a', '\x3', '\x2', '\x2', '\x12', 
		'\x14', '\a', '\x6', '\x2', '\x2', '\x13', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x17', '\a', '\x6', '\x2', '\x2', '\x16', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x19', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1A', '\a', 
		'\x6', '\x2', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1C', '\a', '\x4', '\x2', '\x2', '\x1C', '\x1E', '\a', 
		'\x6', '\x2', '\x2', '\x1D', '\x11', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '!', '\a', '\x5', '\x2', '\x2', ' ', '\"', '\a', '\f', 
		'\x2', '\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '%', 
		'\x5', '\x4', '\x3', '\x2', '$', '#', '\x3', '\x2', '\x2', '\x2', '%', 
		'&', '\x3', '\x2', '\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', 
		'&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '\a', '\x3', '\x2', '\x2', 
		'\x2', '(', '+', '\x5', '\x4', '\x3', '\x2', ')', '+', '\x5', '\x6', '\x4', 
		'\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '*', ')', '\x3', '\x2', '\x2', 
		'\x2', '+', '-', '\x3', '\x2', '\x2', '\x2', ',', '.', '\a', '\v', '\x2', 
		'\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x30', '\x3', '\x2', '\x2', '\x2', '/', '\x31', '\a', '\f', 
		'\x2', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\r', '\f', '\xE', '\x13', '\x16', '\x19', '\x1D', '!', '&', '*', '-', 
		'\x30',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
